"use client";

import { useAuth } from "@/lib/auth";
import { useEffect, useState } from "react";
import { getUserProfile, UserProfile, Transaction } from "@/lib/firestore";
import {
  collection,
  query,
  where,
  orderBy,
  limit,
  getDocs,
} from "firebase/firestore";
import { db } from "@/lib/firebase";
import LoadingSpinner from "@/components/layout/loading-spinner";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import {
  Coins,
  CreditCard,
  TrendingUp,
  TrendingDown,
  History,
  Plus,
  Minus,
} from "lucide-react";
import Link from "next/link";
import { useRouter } from "next/navigation";

function WalletPage() {
  const { user, loading: authLoading } = useAuth();
  const router = useRouter();
  const [profile, setProfile] = useState<UserProfile | null>(null);
  const [transactions, setTransactions] = useState<Transaction[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    async function fetchWalletData() {
      if (authLoading || !user) return;

      try {
        setLoading(true);

        // Get user profile
        const userProfile = await getUserProfile(user.uid);
        if (!userProfile) {
          router.push("/complete-profile");
          return;
        }
        setProfile(userProfile);

        // Get recent transactions
        const transactionsQuery = query(
          collection(db, "transactions"),
          where("userId", "==", user.uid),
          orderBy("timestamp", "desc"),
          limit(10)
        );

        const transactionsSnapshot = await getDocs(transactionsQuery);
        const transactionsData = transactionsSnapshot.docs.map(
          (doc) =>
            ({
              id: doc.id,
              ...doc.data(),
            } as Transaction)
        );

        setTransactions(transactionsData);
      } catch (error) {
        console.error("Error fetching wallet data:", error);
      } finally {
        setLoading(false);
      }
    }

    fetchWalletData();
  }, [user, authLoading, router]);

  if (authLoading || loading) {
    return <LoadingSpinner text="Loading wallet..." />;
  }

  if (!profile) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="text-center">
          <h1 className="text-2xl font-bold mb-4">Profile Required</h1>
          <p className="text-muted-foreground mb-4">
            Please complete your profile to access wallet features.
          </p>
          <Button asChild>
            <Link href="/complete-profile">Complete Profile</Link>
          </Button>
        </div>
      </div>
    );
  }

  const currentBalance = profile.coins || 0;
  const balanceValue = currentBalance * 10; // ₹10 per coin
  const canSellCoins = currentBalance > 100;

  return (
    <div className="container mx-auto px-4 py-8 md:py-12">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div>
            <h1 className="text-3xl font-bold">My Wallet</h1>
            <p className="text-muted-foreground">
              Manage your SkillCoins and transactions
            </p>
          </div>
        </div>

        {/* Balance Cards */}
        <div className="grid md:grid-cols-2 gap-6 mb-8">
          <Card className="border-primary/20">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">
                Current Balance
              </CardTitle>
              <Coins className="h-4 w-4 text-primary" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-primary">
                {currentBalance} coins
              </div>
              <p className="text-xs text-muted-foreground">
                ≈ ₹{balanceValue.toLocaleString()}
              </p>
            </CardContent>
          </Card>

          <Card className="border-green-200">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Coin Value</CardTitle>
              <TrendingUp className="h-4 w-4 text-green-600" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-green-600">₹10</div>
              <p className="text-xs text-muted-foreground">per coin</p>
            </CardContent>
          </Card>
        </div>

        {/* Action Buttons */}
        <div className="grid grid-cols-2 gap-4 mb-8">
          <Button asChild className="h-14" size="lg">
            <Link href="/wallet/purchase">
              <Plus className="mr-2 h-5 w-5" />
              Buy Coins
            </Link>
          </Button>

          <Button
            asChild={canSellCoins}
            disabled={!canSellCoins}
            variant="outline"
            className="h-14"
            size="lg"
          >
            {canSellCoins ? (
              <Link href="/wallet/sell">
                <Minus className="mr-2 h-5 w-5" />
                Sell Coins
              </Link>
            ) : (
              <>
                <Minus className="mr-2 h-5 w-5" />
                Sell Coins (Min. 100)
              </>
            )}
          </Button>
        </div>

        {/* Transaction History */}
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <div>
                <CardTitle className="flex items-center gap-2">
                  <History className="h-5 w-5" />
                  Transaction History
                </CardTitle>
                <CardDescription>Your recent coin transactions</CardDescription>
              </div>
            </div>
          </CardHeader>
          <CardContent>
            {transactions.length === 0 ? (
              <div className="text-center py-8 text-muted-foreground">
                <History className="h-12 w-12 mx-auto mb-4 opacity-50" />
                <p>No transactions yet</p>
                <p className="text-sm">
                  Your transaction history will appear here
                </p>
              </div>
            ) : (
              <div className="space-y-4">
                {transactions.map((transaction) => (
                  <div
                    key={transaction.id}
                    className="flex items-center justify-between p-4 border rounded-lg"
                  >
                    <div className="flex items-center gap-3">
                      <div
                        className={`p-2 rounded-full ${
                          transaction.type === "credit" ||
                          transaction.type === "purchase" ||
                          transaction.type === "session_earning"
                            ? "bg-green-100 text-green-600"
                            : "bg-red-100 text-red-600"
                        }`}
                      >
                        {transaction.type === "credit" ||
                        transaction.type === "purchase" ||
                        transaction.type === "session_earning" ? (
                          <TrendingUp className="h-4 w-4" />
                        ) : (
                          <TrendingDown className="h-4 w-4" />
                        )}
                      </div>

                      <div>
                        <p className="font-medium">
                          {transaction.type === "purchase" && "Coin Purchase"}
                          {transaction.type === "sell" && "Coin Sale"}
                          {transaction.type === "credit" && "Credit"}
                          {transaction.type === "debit" && "Debit"}
                          {transaction.type === "session_earning" &&
                            "Session Earning"}
                          {transaction.type === "session_payment" &&
                            "Session Payment"}
                        </p>
                        <p className="text-sm text-muted-foreground">
                          {transaction.timestamp
                            ?.toDate?.()
                            ?.toLocaleDateString() || "Recent"}
                        </p>
                        {transaction.description && (
                          <p className="text-sm text-muted-foreground">
                            {transaction.description}
                          </p>
                        )}
                      </div>
                    </div>

                    <div className="text-right">
                      <p
                        className={`font-semibold ${
                          transaction.type === "credit" ||
                          transaction.type === "purchase" ||
                          transaction.type === "session_earning"
                            ? "text-green-600"
                            : "text-red-600"
                        }`}
                      >
                        {transaction.type === "credit" ||
                        transaction.type === "purchase" ||
                        transaction.type === "session_earning"
                          ? "+"
                          : "-"}
                        {transaction.amount} coins
                      </p>
                      {transaction.rupeeAmount && (
                        <p className="text-sm text-muted-foreground">
                          ₹{transaction.rupeeAmount}
                        </p>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

export default WalletPage;
