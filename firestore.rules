rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to check if the user is an admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.admin == true;
    }

    // Helper function to check if a user is a participant in a session
    function isSessionParticipant(sessionId) {
      let session = get(/databases/$(database)/documents/sessions/$(sessionId)).data;
      return request.auth.uid == session.mentorId || request.auth.uid == session.menteeId;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Any authenticated user can read any profile (for discover page)
      // Admins can read any profile
      allow read: if request.auth != null || isAdmin();
      
      // Users can only create their own profile
      allow create: if isOwner(userId);
      
      // Users can update their own profile
      // Admins can update any profile (for adjusting coins)
      // A participant of a session can update coin balances during completion
      allow update: if isOwner(userId) || isAdmin() || 
                      (request.auth != null && 
                       'coins' in request.resource.data && 
                       request.resource.data.keys().hasOnly(['coins', 'updatedAt'])); // More complex rule needed here for session completion
                       
      allow delete: if isAdmin(); // Only admins can delete users
    }
    
    // Rules for the 'sessions' collection
    match /sessions/{sessionId} {
      allow read: if isSessionParticipant(sessionId) || isAdmin();
      allow create: if request.auth.uid == request.resource.data.menteeId;
      allow update: if isSessionParticipant(sessionId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Rules for the 'reviews' collection
    match /reviews/{reviewId} {
        allow read: if true; // Anyone can read reviews
        
        // Only the mentee of the corresponding session can create a review
        allow create: if request.auth.uid == request.resource.data.menteeId &&
                       get(/databases/$(database)/documents/sessions/$(request.resource.data.sessionId)).data.menteeId == request.auth.uid;
                       
        allow update, delete: if isAdmin(); // Only admin can edit/delete reviews
    }
    
    // Rules for the 'transactions' collection
    match /transactions/{transactionId} {
      // Users can read their own transactions
      allow read: if isOwner(get(/databases/$(database)/documents/transactions/$(transactionId)).data.userId) || isAdmin();
      // Transactions are created via the session completion logic, which is handled by the rules above.
      // Direct creation should be locked down.
      allow create: if isSessionParticipant(request.resource.data.relatedSessionId);
      allow update, delete: if isAdmin();
    }
  }
}
