
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function getUserData(userId) {
        return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function getSessionData(sessionId) {
        return get(/databases/$(database)/documents/sessions/$(sessionId)).data;
    }
    
    function isMenteeInSession(menteeId, sessionData) {
        return sessionData.menteeId == menteeId;
    }
    
    function isRatingUpdateValid(reviewData, mentorProfile) {
        let currentRating = mentorProfile.rating;
        let reviewCount = mentorProfile.reviewCount;
        let newReviewCount = reviewCount + 1;
        let newTotalRating = (currentRating * reviewCount) + reviewData.rating;
        let newAverageRating = newTotalRating / newReviewCount;
        let requestRating = request.resource.data.rating;
        
        return requestRating == newAverageRating && request.resource.data.reviewCount == newReviewCount;
    }

    // Rules for 'users' collection
    match /users/{userId} {
      // Allow read access for any signed-in user
      allow read: if isSignedIn();

      // Allow creating a user profile only for the owner
      allow create: if isOwner(userId);

      // Allow updating a user profile only for the owner, EXCEPT for rating and reviewCount
      allow update: if isOwner(userId) && 
                      request.resource.data.diff(resource.data).affectedKeys()
                        .hasOnly(['displayName', 'skillsToTeach', 'skillsToLearn', 'linkedinProfile', 'githubProfile', 'leetcodeProfile', 'updatedAt', 'profileComplete', 'photoURL'])
                   || (
                      // Allow updating rating and reviewCount ONLY if it comes from a valid review submission
                      // This is implicitly handled by the 'reviews' and 'sessions' write rules during a transaction.
                      getAfter(/databases/$(database)/documents/reviews/$(request.path.split('/').pop())).data != null
                   );
    }
    
    // Rules for 'sessions' collection
    match /sessions/{sessionId} {
        // Users can only read sessions they are a part of.
        // This rule works for direct gets and queries.
        allow read: if isSignedIn() && 
                    (resource.data.menteeId == request.auth.uid || resource.data.mentorId == request.auth.uid);

        // Allow creation if the requester is the mentee.
        allow create: if isSignedIn() && request.resource.data.menteeId == request.auth.uid;
        
        // Allow updates by either mentee or mentor under specific conditions
        allow update: if isSignedIn() && 
                      (
                        // Mentor can accept/reject or add a meeting link
                        (resource.data.mentorId == request.auth.uid && request.resource.data.status != resource.data.status) ||
                        (resource.data.mentorId == request.auth.uid && request.resource.data.meetingLink != resource.data.meetingLink) ||
                        // Either party can mark as complete
                        ( (resource.data.mentorId == request.auth.uid || resource.data.menteeId == request.auth.uid) && 
                           (request.resource.data.mentorCompleted != resource.data.mentorCompleted || request.resource.data.menteeCompleted != resource.data.menteeCompleted || request.resource.data.status == 'completed') ) ||
                        // Mentee can mark feedback as submitted as part of the review transaction
                        (resource.data.menteeId == request.auth.uid && request.resource.data.feedbackSubmitted == true)
                      );
    }
    
    // Rules for 'reviews' collection
    match /reviews/{reviewId} {
      // Anyone signed in can read reviews
      allow read: if isSignedIn();
      
      // Only the mentee of a session can create a review for it
      allow create: if isSignedIn() &&
                    let sessionData = getSessionData(request.resource.data.sessionId) in
                    let mentorProfile = getUserData(request.resource.data.mentorId) in
                    isMenteeInSession(request.auth.uid, sessionData) &&
                    request.resource.data.menteeId == request.auth.uid &&
                    sessionData.status == 'completed' &&
                    // This uses a write-time get to check the state of the documents IN THE SAME TRANSACTION
                    isRatingUpdateValid(request.resource.data, mentorProfile);
    }
  }
}
