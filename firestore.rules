
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // USERS COLLECTION
    match /users/{userId} {
      // Anyone can create their own user profile
      allow create: if isAuthenticated() && request.auth.uid == userId;

      // Anyone can view a user's profile
      allow get: if true;

      // A user can only update their own profile
      allow update: if isAuthenticated() && request.auth.uid == userId;

      // Users cannot delete their profiles
      allow delete: if false;
    }
    
    // SESSIONS COLLECTION
    match /sessions/{sessionId} {
        // A user can view a session only if they are the mentee or mentor
        allow get: if isAuthenticated() && (resource.data.menteeId == request.auth.uid || resource.data.mentorId == request.auth.uid);

        // An authenticated user can create a session request
        allow create: if isAuthenticated();
        
        // A user can update a session if they are the mentee or mentor
        allow update: if isAuthenticated() && (resource.data.menteeId == request.auth.uid || resource.data.mentorId == request.auth.uid);

        // Users cannot delete sessions
        allow delete: if false;
    }

    // REVIEWS COLLECTION
    match /reviews/{reviewId} {
        // Anyone can read reviews
        allow get: if true;
        
        // A mentee can create a review for a session they were part of.
        // This is checked inside the transaction security rules below.
        // For a non-transactional write, we can add a simple rule.
        allow create: if isAuthenticated() && request.resource.data.menteeId == request.auth.uid;

        // Reviews are immutable
        allow update, delete: if false;
    }
  }
}

    