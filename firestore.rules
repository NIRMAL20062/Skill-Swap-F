rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if the user is an admin
    function isAdmin(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.admin == true;
    }
    
    // Users can only read/write their own profile, but admins can read/write any profile.
    // All authenticated users can read public profiles.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId || isAdmin(request.auth.uid);
      allow delete: if isAdmin(request.auth.uid);
    }
    
    // Users can read all sessions they are a part of.
    // Users can create new sessions.
    // Users can update a session if they are the mentor or mentee.
    match /sessions/{sessionId} {
      allow read: if request.auth != null && (resource.data.menteeId == request.auth.uid || resource.data.mentorId == request.auth.uid);
      allow create: if request.auth != null;
      allow update: if request.auth != null && (resource.data.menteeId == request.auth.uid || resource.data.mentorId == request.auth.uid);
    }
    
    // Any authenticated user can create a review.
    // Reviews are public to read.
    match /reviews/{reviewId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.menteeId == request.auth.uid;
      allow update, delete: if isAdmin(request.auth.uid);
    }
    
    // Users can only read their own transactions.
    // No one can create/update/delete transactions directly (they are created by trusted logic).
    match /transactions/{transactionId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create, update, delete: if false;
    }
  }
}
