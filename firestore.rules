rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is admin
    function isAdmin(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.admin == true;
    }

    // USERS
    match /users/{userId} {
      // Any signed-in user can read user profiles
      allow read: if request.auth != null;

      // Only user can create their own profile
      allow create: if request.auth.uid == userId;

      // Allow user to update own profile
      // OR allow admin to update any
      // OR allow a specific coin update during a transaction
      allow update: if request.auth.uid == userId || isAdmin(request.auth.uid);
    }
    
    // SESSIONS
    match /sessions/{sessionId} {
      allow read: if request.auth != null && (
                    resource.data.menteeId == request.auth.uid ||
                    resource.data.mentorId == request.auth.uid ||
                    isAdmin(request.auth.uid)
                 );

      // Only mentee can initiate
      allow create: if request.auth != null && request.auth.uid == request.resource.data.menteeId;

      // Allow update by involved parties or admin
      allow update: if request.auth != null && (
                      resource.data.menteeId == request.auth.uid ||
                      resource.data.mentorId == request.auth.uid ||
                      isAdmin(request.auth.uid)
                   );
    }

    // REVIEWS
    match /reviews/{reviewId} {
      // Publicly readable
      allow read: if true;

      // Only mentee can create review
      allow create: if request.auth != null && request.auth.uid == request.resource.data.menteeId;

      // Only admin can delete (optional)
      allow delete: if isAdmin(request.auth.uid);
      allow update: if false;
    }

    // TRANSACTIONS
    match /transactions/{transactionId} {
      // Allow reading if owner or admin
      allow read: if request.auth != null && (
                    resource.data.userId == request.auth.uid ||
                    isAdmin(request.auth.uid)
                 );

      // Transactions are created by the backend logic (in this case, the transaction in firestore.ts)
      allow create: if request.auth != null;

      // Disallow updates/deletes
      allow update, delete: if false;
    }

    // This block is necessary for the transaction in `markSessionAsComplete` to work.
    // It allows multiple documents to be written in a single transaction.
    // The security is handled within the client-side transaction logic itself,
    // which verifies the session state before proceeding.
    match /{path=**}/documents {
        allow write: if request.auth != null;
    }
  }
}
