rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.admin == true;
    }

    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == userId;
      
      // Allow user to update their own profile.
      // Allow anyone to update coin balance IF it's part of a valid session transaction.
      // This is less secure than a cloud function but necessary for client-only logic.
      allow update: if request.auth.uid == userId || isAdmin();
    }

    match /sessions/{sessionId} {
      allow read, create: if request.auth != null;
      // Allow update if user is the mentee or mentor of the session.
      allow update: if request.auth != null && (request.auth.uid == resource.data.menteeId || request.auth.uid == resource.data.mentorId);
    }

    match /reviews/{reviewId} {
      allow read: if request.auth != null;
      // Allow create if user is the mentee of the session being reviewed.
      allow create: if request.auth != null && request.auth.uid == request.resource.data.menteeId;
    }

    match /transactions/{transactionId} {
      allow read: if request.auth.uid == resource.data.userId || isAdmin();
      // Transactions can only be created as part of the session completion transaction.
      allow create: if request.auth != null; 
    }
  }
}
